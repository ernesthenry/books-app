{"version":3,"sources":["BooksAPI.js","components/Book.js","components/BookList.js","components/SearchList.js","components/MainPage.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","then","res","json","data","book","getAll","books","update","shelf","id","method","body","JSON","stringify","search","query","Book","this","props","changeBookState","currentReadingStyle","wantToReadStyle","readStyle","noneStyle","className","style","width","height","backgroundImage","imageLinks","smallThumbnail","onChange","event","target","value","disabled","selected","title","author","Component","BookList","listOfBooks","length","map","key","SearchList","state","searchBooks","BooksAPI","index","setState","to","type","placeholder","MainPage","CurrentReadingBooks","filter","WantToReadBooks","ReadBooks","BooksApp","getAllBooks","updateBookState","newBooks","b","addBook","exact","path","render","React","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.021b2622.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token;\nif (!token)\n  token = localStorage.token = Math.random()\n    .toString(36)\n    .substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token\n};\n\nexport const get = bookId =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json());\n\nexport const search = query =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ query })\n  })\n    .then(res => res.json())\n    .then(data => data.books);\n","import React, { Component } from 'react';\nclass Book extends Component {\n    render() {\n        const { \n            book,\n            changeBookState,\n            currentReadingStyle,\n            wantToReadStyle,\n            readStyle,\n            noneStyle\n        } = this.props;\n        return (\n            <div className=\"book\">\n                <div className=\"book-top\">\n                    <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks && book.imageLinks.smallThumbnail})` }}></div>\n                    <div className=\"book-shelf-changer\">\n                        <select onChange={(event) => changeBookState(event.target.value, book)} >\n                            <option className=\"moveTo\" value='move' disabled>Move to...</option>\n                            <option className={currentReadingStyle} value=\"currentlyReading\">Currently Reading</option>\n                            <option className={wantToReadStyle} value=\"wantToRead\">Want to Read</option>\n                            <option className={readStyle} value=\"read\">Read</option>\n                            <option className={noneStyle} value=\"none\" selected>None</option>\n                        </select>\n                    </div>\n                </div>\n                <div className=\"book-title\">{book.title}</div>\n                <div className=\"book-authors\">{book.author}</div>\n            </div>\n        )\n    }\n}\n\nexport default Book;","import React, { Component } from 'react';\nimport Book from './Book'\nclass BookList extends Component {\n    render() {\n        const {\n            books = [],\n            changeBookState\n        } = this.props;\n        const listOfBooks = books.length > 0 && books.map(book => {\n            if (book.shelf === 'currentlyReading') {\n                return <li key={book.id}>\n                    <Book currentReadingStyle='selected' changeBookState={changeBookState} book={book} />\n                </li>\n            } else if (book.shelf === 'wantToRead') {\n                return <li key={book.id}>\n                    <Book wantToReadStyle='selected' changeBookState={changeBookState} book={book} />\n                </li>\n            } else if (book.shelf === \"read\") {\n                return <li key={book.id}>\n                    <Book readStyle='selected' changeBookState={changeBookState} book={book} />\n                </li>\n            } else {\n                return <li key={book.id}>\n                    <Book noneStyle='selected' changeBookState={changeBookState} book={book} />\n                </li>\n            }\n        })\n        return (\n            <div className=\"bookshelf\">\n                <div className=\"bookshelf-books\">\n                    <ol className=\"books-grid\">\n                        {listOfBooks}\n                    </ol>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default BookList;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport * as BooksAPI from '../BooksAPI';\nimport BookList from './BookList';\n\nclass SearchList extends Component {\n    state = {\n        books: []\n    }\n    searchBooks  = (query) => {\n        BooksAPI.search(query)\n            .then(books => {\n                if (books) {\n                    for (let index = 0; index < books.length; index++) {\n                        this.props.books.map(book => {\n                            if (books[index].id === book.id) {\n                                books[index].shelf = book.shelf;\n                            }\n                            return books[index]\n                        })\n                    }\n                }\n                this.setState({\n                    books: books\n                })\n            })\n    }\n    render() {\n        const { changeBookState } = this.props;\n        return (\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                    <Link to='/' className=\"close-search\"  >Close</Link>\n                    <div className=\"search-books-input-wrapper\">\n                        <input onChange={(event) => {\n                            this.searchBooks(event.target.value)\n                        }} type=\"text\" placeholder=\"Search by title or author\" />\n                    </div>\n                </div>\n                <div className=\"search-books-results\">\n                    <BookList changeBookState={changeBookState} books={this.state.books} />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SearchList;\n\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport BookList from './BookList';\n\nclass MainPage extends Component {\n    render() {\n        const { books = [], changeBookState } = this.props;\n        const CurrentReadingBooks = books.length > 0 && books.filter(book => book.shelf === \"currentlyReading\");\n        const WantToReadBooks = books.length > 0 && books.filter(book => book.shelf === \"wantToRead\");\n        const ReadBooks = books.length > 0 && books.filter(book => book.shelf === \"read\");\n        return (\n            <div className=\"list-books\">\n                <div className=\"list-books-title\">\n                    <h1>Bookshelf</h1>\n                </div >\n                <div className=\"list-books-content\">\n                    <div>\n                        <div className=\"bookshelf\">\n                            <h2 className=\"bookshelf-title\">Currently Reading</h2>\n                            <BookList changeBookState={changeBookState} books={CurrentReadingBooks} />\n                        </div>\n                        <div className=\"bookshelf\">\n\n                            <h2 className=\"bookshelf-title\">Want to Read</h2>\n                            <BookList changeBookState={changeBookState} books={WantToReadBooks} />\n\n                        </div>\n                        <div className=\"bookshelf\">\n                            <h2 className=\"bookshelf-title\">Read</h2>\n                            <BookList changeBookState={changeBookState} books={ReadBooks} />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"open-search\">\n                    <Link to='/search' >Add a book</Link>\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default MainPage;","import React from 'react'\nimport './App.css'\nimport SearchList from './components/SearchList';\nimport MainPage from './components/MainPage'\nimport { Route } from 'react-router-dom';\n\nimport * as BooksAPI from './BooksAPI';\n\nclass BooksApp extends React.Component {\n  state = {\n    books: []\n  }\n  componentDidMount() {\n    this.getAllBooks()\n  }\n\n  getAllBooks = () => {\n    BooksAPI.getAll()\n    .then(books => {\n      this.setState(() => ({\n        books: books\n      }))\n    })\n  }\n\n \n\n  updateBookState = (shelf, book) => {\n    BooksAPI.update(book, shelf)\n      .then(books => {\n        let newBooks = this.state.books.map(b => {\n          if (book.id === b.id) {\n            book.shelf = shelf\n            return book;\n          } else {\n            return b;\n          }\n        })\n        this.setState(() => ({\n          books: newBooks\n        }))\n      })\n  }\n\n  addBook = (shelf, book) => {\n    BooksAPI.update(book, shelf)\n      .then(books => {\n        BooksAPI.get(book.id)\n          .then(book => {\n            let newBooks = this.state.books.filter(b => b.id !== book.id);\n            this.setState(() => ({\n              books: [...newBooks, book]\n              \n            }))\n          })\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Route exact path='/' render={() => (\n          <MainPage changeBookState={this.updateBookState} books={this.state.books} />\n        )} />\n        <Route\n          exact path=\"/search\"\n          render={() => (\n            <SearchList books={this.state.books} changeBookState={this.addBook} />\n          )}\n        />\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}